// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/pane/proto/pane.proto

package proto

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConnectRequest struct {
	FdSocketPath         string   `protobuf:"bytes,1,opt,name=fd_socket_path,json=fdSocketPath,proto3" json:"fd_socket_path,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_65adb0e31fae1ba9, []int{0}
}

func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (m *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(m, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

func (m *ConnectRequest) GetFdSocketPath() string {
	if m != nil {
		return m.FdSocketPath
	}
	return ""
}

type ConnectReply struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectReply) Reset()         { *m = ConnectReply{} }
func (m *ConnectReply) String() string { return proto.CompactTextString(m) }
func (*ConnectReply) ProtoMessage()    {}
func (*ConnectReply) Descriptor() ([]byte, []int) {
	return fileDescriptor_65adb0e31fae1ba9, []int{1}
}

func (m *ConnectReply) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectReply.Unmarshal(m, b)
}
func (m *ConnectReply) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectReply.Marshal(b, m, deterministic)
}
func (m *ConnectReply) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectReply.Merge(m, src)
}
func (m *ConnectReply) XXX_Size() int {
	return xxx_messageInfo_ConnectReply.Size(m)
}
func (m *ConnectReply) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectReply.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectReply proto.InternalMessageInfo

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "pane.ConnectRequest")
	proto.RegisterType((*ConnectReply)(nil), "pane.ConnectReply")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// PaneClient is the client API for Pane service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type PaneClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Pane_ConnectClient, error)
}

type paneClient struct {
	cc *grpc.ClientConn
}

func NewPaneClient(cc *grpc.ClientConn) PaneClient {
	return &paneClient{cc}
}

func (c *paneClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Pane_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Pane_serviceDesc.Streams[0], "/pane.Pane/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &paneConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Pane_ConnectClient interface {
	Recv() (*ConnectReply, error)
	grpc.ClientStream
}

type paneConnectClient struct {
	grpc.ClientStream
}

func (x *paneConnectClient) Recv() (*ConnectReply, error) {
	m := new(ConnectReply)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// PaneServer is the server API for Pane service.
type PaneServer interface {
	Connect(*ConnectRequest, Pane_ConnectServer) error
}

func RegisterPaneServer(s *grpc.Server, srv PaneServer) {
	s.RegisterService(&_Pane_serviceDesc, srv)
}

func _Pane_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(PaneServer).Connect(m, &paneConnectServer{stream})
}

type Pane_ConnectServer interface {
	Send(*ConnectReply) error
	grpc.ServerStream
}

type paneConnectServer struct {
	grpc.ServerStream
}

func (x *paneConnectServer) Send(m *ConnectReply) error {
	return x.ServerStream.SendMsg(m)
}

var _Pane_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pane.Pane",
	HandlerType: (*PaneServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Pane_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/pane/proto/pane.proto",
}

func init() { proto.RegisterFile("internal/pane/proto/pane.proto", fileDescriptor_65adb0e31fae1ba9) }

var fileDescriptor_65adb0e31fae1ba9 = []byte{
	// 189 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xcb, 0xcc, 0x2b, 0x49,
	0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x2f, 0x48, 0xcc, 0x4b, 0xd5, 0x2f, 0x28, 0xca, 0x2f, 0xc9, 0x07,
	0x33, 0xf5, 0xc0, 0x4c, 0x21, 0x16, 0x10, 0x5b, 0xc9, 0x8c, 0x8b, 0xcf, 0x39, 0x3f, 0x2f, 0x2f,
	0x35, 0xb9, 0x24, 0x28, 0xb5, 0xb0, 0x34, 0xb5, 0xb8, 0x44, 0x48, 0x85, 0x8b, 0x2f, 0x2d, 0x25,
	0xbe, 0x38, 0x3f, 0x39, 0x3b, 0xb5, 0x24, 0xbe, 0x20, 0xb1, 0x24, 0x43, 0x82, 0x51, 0x81, 0x51,
	0x83, 0x33, 0x88, 0x27, 0x2d, 0x25, 0x18, 0x2c, 0x18, 0x90, 0x58, 0x92, 0xa1, 0xc4, 0xc7, 0xc5,
	0x03, 0xd7, 0x57, 0x90, 0x53, 0x69, 0x64, 0xcf, 0xc5, 0x12, 0x90, 0x98, 0x97, 0x2a, 0x64, 0xce,
	0xc5, 0x0e, 0x15, 0x17, 0x12, 0xd1, 0x03, 0xdb, 0x86, 0x6a, 0xbc, 0x94, 0x10, 0x9a, 0x68, 0x41,
	0x4e, 0xa5, 0x12, 0x83, 0x01, 0xa3, 0x93, 0x79, 0x94, 0x69, 0x7a, 0x66, 0x49, 0x46, 0x69, 0x92,
	0x5e, 0x72, 0x7e, 0xae, 0x7e, 0x79, 0x66, 0x5e, 0x4a, 0x6e, 0x66, 0x4e, 0x4e, 0x6a, 0x5e, 0xba,
	0x7e, 0x49, 0x66, 0x4e, 0x89, 0x3e, 0x16, 0xcf, 0x58, 0x83, 0xc9, 0x24, 0x36, 0x30, 0x65, 0x0c,
	0x08, 0x00, 0x00, 0xff, 0xff, 0xc4, 0x44, 0x54, 0xa4, 0xf0, 0x00, 0x00, 0x00,
}
