// Code generated by protoc-gen-go. DO NOT EDIT.
// source: internal/stream/stream.proto

package proto // import "github.com/windmilleng/tilt/internal/stream/proto"

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type ConnectRequest struct {
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *ConnectRequest) Reset()         { *m = ConnectRequest{} }
func (m *ConnectRequest) String() string { return proto.CompactTextString(m) }
func (*ConnectRequest) ProtoMessage()    {}
func (*ConnectRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_9633e822ba73f4fd, []int{0}
}
func (m *ConnectRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ConnectRequest.Unmarshal(m, b)
}
func (m *ConnectRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ConnectRequest.Marshal(b, m, deterministic)
}
func (dst *ConnectRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ConnectRequest.Merge(dst, src)
}
func (m *ConnectRequest) XXX_Size() int {
	return xxx_messageInfo_ConnectRequest.Size(m)
}
func (m *ConnectRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_ConnectRequest.DiscardUnknown(m)
}

var xxx_messageInfo_ConnectRequest proto.InternalMessageInfo

type StreamMessage struct {
	S                    string   `protobuf:"bytes,1,opt,name=s,proto3" json:"s,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *StreamMessage) Reset()         { *m = StreamMessage{} }
func (m *StreamMessage) String() string { return proto.CompactTextString(m) }
func (*StreamMessage) ProtoMessage()    {}
func (*StreamMessage) Descriptor() ([]byte, []int) {
	return fileDescriptor_stream_9633e822ba73f4fd, []int{1}
}
func (m *StreamMessage) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_StreamMessage.Unmarshal(m, b)
}
func (m *StreamMessage) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_StreamMessage.Marshal(b, m, deterministic)
}
func (dst *StreamMessage) XXX_Merge(src proto.Message) {
	xxx_messageInfo_StreamMessage.Merge(dst, src)
}
func (m *StreamMessage) XXX_Size() int {
	return xxx_messageInfo_StreamMessage.Size(m)
}
func (m *StreamMessage) XXX_DiscardUnknown() {
	xxx_messageInfo_StreamMessage.DiscardUnknown(m)
}

var xxx_messageInfo_StreamMessage proto.InternalMessageInfo

func (m *StreamMessage) GetS() string {
	if m != nil {
		return m.S
	}
	return ""
}

func init() {
	proto.RegisterType((*ConnectRequest)(nil), "stream.ConnectRequest")
	proto.RegisterType((*StreamMessage)(nil), "stream.StreamMessage")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// StreamClient is the client API for Stream service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type StreamClient interface {
	Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Stream_ConnectClient, error)
}

type streamClient struct {
	cc *grpc.ClientConn
}

func NewStreamClient(cc *grpc.ClientConn) StreamClient {
	return &streamClient{cc}
}

func (c *streamClient) Connect(ctx context.Context, in *ConnectRequest, opts ...grpc.CallOption) (Stream_ConnectClient, error) {
	stream, err := c.cc.NewStream(ctx, &_Stream_serviceDesc.Streams[0], "/stream.Stream/Connect", opts...)
	if err != nil {
		return nil, err
	}
	x := &streamConnectClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type Stream_ConnectClient interface {
	Recv() (*StreamMessage, error)
	grpc.ClientStream
}

type streamConnectClient struct {
	grpc.ClientStream
}

func (x *streamConnectClient) Recv() (*StreamMessage, error) {
	m := new(StreamMessage)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// StreamServer is the server API for Stream service.
type StreamServer interface {
	Connect(*ConnectRequest, Stream_ConnectServer) error
}

func RegisterStreamServer(s *grpc.Server, srv StreamServer) {
	s.RegisterService(&_Stream_serviceDesc, srv)
}

func _Stream_Connect_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ConnectRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StreamServer).Connect(m, &streamConnectServer{stream})
}

type Stream_ConnectServer interface {
	Send(*StreamMessage) error
	grpc.ServerStream
}

type streamConnectServer struct {
	grpc.ServerStream
}

func (x *streamConnectServer) Send(m *StreamMessage) error {
	return x.ServerStream.SendMsg(m)
}

var _Stream_serviceDesc = grpc.ServiceDesc{
	ServiceName: "stream.Stream",
	HandlerType: (*StreamServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "Connect",
			Handler:       _Stream_Connect_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "internal/stream/stream.proto",
}

func init() {
	proto.RegisterFile("internal/stream/stream.proto", fileDescriptor_stream_9633e822ba73f4fd)
}

var fileDescriptor_stream_9633e822ba73f4fd = []byte{
	// 172 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xe2, 0x92, 0xc9, 0xcc, 0x2b, 0x49,
	0x2d, 0xca, 0x4b, 0xcc, 0xd1, 0x2f, 0x2e, 0x29, 0x4a, 0x4d, 0xcc, 0x85, 0x52, 0x7a, 0x05, 0x45,
	0xf9, 0x25, 0xf9, 0x42, 0x6c, 0x10, 0x9e, 0x92, 0x00, 0x17, 0x9f, 0x73, 0x7e, 0x5e, 0x5e, 0x6a,
	0x72, 0x49, 0x50, 0x6a, 0x61, 0x69, 0x6a, 0x71, 0x89, 0x92, 0x2c, 0x17, 0x6f, 0x30, 0x58, 0xce,
	0x37, 0xb5, 0xb8, 0x38, 0x31, 0x3d, 0x55, 0x88, 0x87, 0x8b, 0xb1, 0x58, 0x82, 0x51, 0x81, 0x51,
	0x83, 0x33, 0x88, 0xb1, 0xd8, 0xc8, 0x8d, 0x8b, 0x0d, 0x22, 0x2d, 0x64, 0xc3, 0xc5, 0x0e, 0xd5,
	0x2a, 0x24, 0xa6, 0x07, 0x35, 0x1c, 0xd5, 0x2c, 0x29, 0x51, 0x98, 0x38, 0x8a, 0x89, 0x4a, 0x0c,
	0x06, 0x8c, 0x4e, 0x96, 0x51, 0xe6, 0xe9, 0x99, 0x25, 0x19, 0xa5, 0x49, 0x7a, 0xc9, 0xf9, 0xb9,
	0xfa, 0xe5, 0x99, 0x79, 0x29, 0xb9, 0x99, 0x39, 0x39, 0xa9, 0x79, 0xe9, 0xfa, 0x25, 0x99, 0x39,
	0x25, 0xfa, 0xe8, 0x8e, 0x07, 0xbb, 0xda, 0x1a, 0x4c, 0x26, 0xb1, 0x81, 0x29, 0x63, 0x40, 0x00,
	0x00, 0x00, 0xff, 0xff, 0xa3, 0x80, 0x0e, 0xa0, 0xe2, 0x00, 0x00, 0x00,
}
