// Code generated by Wire. DO NOT EDIT.

//go:generate wire
//+build !wireinject

package synclet

import (
	"context"
	"fmt"
	"github.com/windmilleng/tilt/internal/container"
	"github.com/windmilleng/tilt/internal/docker"
	"github.com/windmilleng/tilt/internal/k8s"
	"github.com/windmilleng/tilt/internal/k8s/cri"
	"google.golang.org/grpc"
	"k8s.io/kubernetes/pkg/kubelet/apis/cri/runtime/v1alpha2"
	"net"
	"time"
)

// Injectors from wire.go:

func WireDockerSynclet(ctx context.Context, env k8s.Env, runtime container.Runtime) (*DockerSynclet, error) {
	cli, err := docker.DefaultClient(ctx, env, runtime)
	if err != nil {
		return nil, err
	}
	dockerSynclet := NewDockerSynclet(cli)
	return dockerSynclet, nil
}

func WireCriSynclet(ctx context.Context, endpoint Endpoint) (*CriSynclet, error) {
	runtimeServiceClient, err := provideRuntimeClient(ctx, endpoint)
	if err != nil {
		return nil, err
	}
	grpcClient := cri.NewGrpcClient(runtimeServiceClient)
	criSynclet := NewCriSynclet(grpcClient)
	return criSynclet, nil
}

// wire.go:

type Endpoint string

func provideRuntimeClient(ctx context.Context, endpoint Endpoint) (v1alpha2.RuntimeServiceClient, error) {

	addr := string(endpoint)

	conn, err := grpc.Dial(addr, grpc.WithInsecure(), grpc.WithBlock(), grpc.WithTimeout(2*time.Second), grpc.WithDialer(dial))
	if err != nil {
		return nil, fmt.Errorf("failed to connect to %v: %v", addr, err)
	}

	return v1alpha2.NewRuntimeServiceClient(conn), nil
}

func dial(addr string, timeout time.Duration) (net.Conn, error) {
	return net.DialTimeout("unix", addr, timeout)
}
